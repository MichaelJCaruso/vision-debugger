
################################################################
####  Block
################################################################

Block define: 'ponder' toBePrimitive: 505 withControlValue: 2 ;

################################################################
####  BuiltInWorkspace
################################################################

#----------------------------------------------------------------
#  Private Protocol
#----------------------------------------------------------------

BuiltInWorkspace define: 'inspector' toBe: NA;

BuiltInWorkspace defineMethod: [ | handleInspection: suspension |
    !inspector <- suspension suspendee send: [
        isACall ifTrue: [ caller ] ifFalse: [ ^self ] . local inspector
    ];
    inspector isntNA ifTrue: [ inspector handle: suspension ]
];

################################################################
####  Object
################################################################

#----------------------------------------------------------------
#  Private Protocol
#----------------------------------------------------------------

Object defineMethod: [ | handleSNF: suspension |
    ^local inspector isntNA ifTrue: [
	# ... turn off wired SNF report...
        suspension suspendee dismiss;
        ^local inspector handle: suspension;
        NA
    ]
];


################################################################
####  Debug Inspector
################################################################

#----------------------------------------------------------------
#  Public Protocol
#----------------------------------------------------------------

################
####  'print'
################

Debug Inspector defineMethod: [ | print |
    ^super print;
    suspensions count > 0 ifTrue: [
	" and " print;
	^self print: suspensions count ifSingular: "suspension" else: "suspensions"
    ];
    ^self
];

################
####  Evaluation Monitoring
################

Debug Inspector defineMethod: [ | evaluateReadEvalPrint |
    ^self evaluateReadEvalPrintIn: ^global
];

Debug Inspector defineMethod: [ | evaluateReadEvalPrintIn: anObject |
    "+++ Entering debug monitor mode..." printNL;
    !result <- ^self evaluate: [ anObject readEvalPrint ];
    "+++ ...leaving debug monitor mode." printNL;
    result
];

Debug Inspector defineMethod: [ | evaluate: block |
    !self <- ^self;
    ^local extendBy: [ !inspector <- ^my self ]. asLocalContextFor: block
];


################
####  Suspension Display
################

Debug Inspector defineMethod: [ | setDefaultCallerFramesTo: n |
    :_defaultCallerFrames <- n;
    ^self
];

Debug Inspector defineMethod: [ | setDefaultConsumerFramesTo: n |
    :_defaultConsumerFrames <- n;
    ^self
];

Debug Inspector defineMethod: [ | displayCallers |
    ^self displayCallersFor: _defaultCallerFrames
];

Debug Inspector defineMethod: [ | displayCallers: n |
    ^self display: [ ^self displayCallersFor: ^my _defaultCallerFrames ] forSuspension: n
];

Debug Inspector defineMethod: [ | displayCallers: n for: frameCount |
    ^self display: [ ^self displayCallersFor: ^my frameCount ] forSuspension: n
];

Debug Inspector defineMethod: [ | displayCallersFor: frameCount |
    ^self display: [ ^self displayCallersFor: ^my frameCount; "=" fill: 70 . printNL ]
];

Debug Inspector defineMethod: [ | displayConsumers |
    ^self displayConsumersFor: _defaultConsumerFrames
];

Debug Inspector defineMethod: [ | displayConsumers: n |
    ^self display: [^self displayConsumersFor: ^my _defaultConsumerFrames ] forSuspension: n
];

Debug Inspector defineMethod: [ | displayConsumersFor: frameCount |
    ^self display: [ ^self displayConsumersFor: ^my frameCount; "=" fill: 70 . printNL ]
];

Debug Inspector defineMethod: [ | displayConsumers: n for: frameCount |
    ^self display: [^self displayConsumersFor: ^my frameCount] forSuspension: n
];

Debug Inspector defineMethod: [ | display: what |
    ModelObject CUnit displayInfoHeading;
    suspensions numberElements do: [
        "+++ " print; position asString print; ":" printNL;
        ^self asSelf do: ^my what;
        newLine print;
    ];
    ^self
];

Debug Inspector defineMethod: [ | display: what forSuspension: n |
    suspensions at: n . send: [
	^self isntNA ifTrue: [^self do: ^my what]
    ];
    ^self
];

Debug Inspector defineMethod: [ | displaySummary |
    "#" print: 3; ModelObject CUnit displayInfoHeading;
    suspensions extendBy: [
	!summaryOutput <- [ ^self displayCaller ] divertOutput asLines
    ]. numberElements do: [
	summaryOutput numberElements do: [
	    position > 1 ifTrue: [ " " ] ifFalse: [ ^my position ]. print: -3;
	    printNL
	]
    ];
    ^self
];


################
####  Suspension Access
################

Debug Inspector defineMethod: [ | suspendees |
    suspensions send: [suspendee]
];

Debug Inspector defineMethod: [ | suspension: n |
    suspensions at: n
];

Debug Inspector defineMethod: [ | suspendee: n |
    ^self suspension: n. send: [isntNA ifTrue: [^self suspendee]]
];


################
####  Suspension Control
################

Debug Inspector defineMethod: [ | setResult: n to: value |
    ^self perform: [_representative setResultTo: ^my value] forSuspension: n
];

Debug Inspector defineMethod: [ | abort |
    ^self perform: [^self abort] forSuspension: 1
];

Debug Inspector defineMethod: [ | abort: n |
    ^self perform: [^self abort] forSuspension: n
];

Debug Inspector defineMethod: [ | abortAll |
    ^self perform: [^self abort]
];

Debug Inspector defineMethod: [ | commit |
    ^self perform: [^self commit] forSuspension: 1
];

Debug Inspector defineMethod: [ | commit: n |
    ^self perform: [^self commit] forSuspension: n
];

Debug Inspector defineMethod: [ | commitAll |
    ^self perform: [^self commit]
];

Debug Inspector defineMethod: [ | resume |
    ^self perform: [^self resume] forSuspension: 1
];

Debug Inspector defineMethod: [ | resume: n |
    ^self perform: [^self resume] forSuspension: n
];

Debug Inspector defineMethod: [ | resumeAll |
    ^self perform: [^self resume]
];

Debug Inspector defineMethod: [ | stepDown |
    ^self perform: [^self stepDown] forSuspension: 1
];

Debug Inspector defineMethod: [ | stepDown: n |
    ^self perform: [^self stepDown] forSuspension: n
];

Debug Inspector defineMethod: [ | stepDownAll |
    ^self perform: [^self stepDown]
];

Debug Inspector defineMethod: [ | stepUp |
    ^self perform: [^self stepUp] forSuspension: 1
];

Debug Inspector defineMethod: [ | stepUp: n |
    ^self perform: [^self stepUp] forSuspension: n
];

Debug Inspector defineMethod: [ | stepUpAll |
    ^self perform: [^self stepUp]
];

Debug Inspector defineMethod: [ | stepIn |
    ^self perform: [^self stepIn] forSuspension: 1
];

Debug Inspector defineMethod: [ | stepIn: n |
    ^self perform: [^self stepIn] forSuspension: n
];

Debug Inspector defineMethod: [ | stepInAll |
    ^self perform: [^self stepIn]
];

Debug Inspector defineMethod: [ | stepOut |
    ^self perform: [^self stepOut] forSuspension: 1
];

Debug Inspector defineMethod: [ | stepOut: n |
    ^self perform: [^self stepOut] forSuspension: n
];

Debug Inspector defineMethod: [ | stepOutAll |
    ^self perform: [^self stepOut]
];

Debug Inspector defineMethod: [ | stepOver |
    ^self perform: [^self stepOver] forSuspension: 1
];

Debug Inspector defineMethod: [ | stepOver: n |
    ^self perform: [^self stepOver] forSuspension: n
];

Debug Inspector defineMethod: [ | stepOverAll |
    ^self perform: [^self stepOver]
];

Debug Inspector defineMethod: [ | stepToCaller |
    ^self perform: [^self stepToCaller] forSuspension: 1
];

Debug Inspector defineMethod: [ | stepToCaller: n |
    ^self perform: [^self stepToCaller] forSuspension: n
];

Debug Inspector defineMethod: [ | stepToCallerAll |
    ^self perform: [^self stepToCaller]
];

Debug Inspector defineMethod: [ | stepToConsumer |
    ^self perform: [^self stepToConsumer] forSuspension: 1
];

Debug Inspector defineMethod: [ | stepToConsumer: n |
    ^self perform: [^self stepToConsumer] forSuspension: n
];

Debug Inspector defineMethod: [ | stepToConsumerAll |
    ^self perform: [^self stepToConsumer]
];

Debug Inspector defineMethod: [ | stepIntoConsumer |
    ^self perform: [^self stepIntoConsumer] forSuspension: 1
];

Debug Inspector defineMethod: [ | stepIntoConsumer: n |
    ^self perform: [^self stepIntoConsumer] forSuspension: n
];

Debug Inspector defineMethod: [ | stepIntoConsumerAll |
    ^self perform: [^self stepIntoConsumer]
];

Debug Inspector defineMethod: [ | stepToEnd |
    ^self perform: [^self stepToEnd] forSuspension: 1
];

Debug Inspector defineMethod: [ | stepToEnd: n |
    ^self perform: [^self stepToEnd] forSuspension: n
];

Debug Inspector defineMethod: [ | stepToEndAll |
    ^self perform: [^self stepToEnd]
];


#----------------------------------------------------------------
#  Semi-Private Protocol
#----------------------------------------------------------------

Debug Inspector defineMethod: [ | perform: actionBlock forSuspension: n |
    suspensions at: n. do: [
	^self isntNA ifTrue: [^self do: ^my actionBlock]
    ];
    waitForSuspensions;
];

Debug Inspector defineMethod: [ | perform: actionBlock |
    suspensions do: actionBlock;
    waitForSuspensions;
];


################

Debug Inspector defineMethod: [ | handle: suspension |
    [	^self startMonitor ifTrue: [
	    suspensions mvalue: [
		suspensions add: suspension asDebugModelObject;
		_monitorSuspension isntNA ifTrue: [
		    _monitorSuspension resume;
		    :_monitorSuspension <- NA;
		    :_monitorSuspension cleanStore
		]
	    ];
	] ifFalse: [
	    suspension commit
	]
    ] bgScalar send: [^self waitForTermination; ^self datum]
];

Debug Inspector defineMethod: [ | waitForSuspensions |
    [ | :waitSuspension |
	suspensions mvalue: [
	    suspensions numberElements select: [
		^self isInternalDefault || [ ^self committed ]
	    ]. do: [
		^my suspensions delete: position
	    ];
	    suspensions count = 0 ifTrue: [
	    	:_monitorSuspension <- waitSuspension
	    ] ifFalse: [
		waitSuspension commit
	    ]
	]
    ] ponder;

    !thisCount;
    !lastCount <- suspensions count;
    [ relinquishTimeSlice; (:thisCount <- suspensions count) != lastCount ] whileTrue: [
	:lastCount <- thisCount;
    ];
    ModelObject cleanModel;

    newLine print;
    "+++ Inspecting:" printNL;
    ^self displaySummary

    suspensions count > 0
];


################

Debug Inspector defineMethod: [ | startMonitor |
    ^self mvalue: [
	_monitor doesGroundMagic isFalse || [ _monitor terminated ] ifTrue: [
	    :_monitor <- [
		"+++ Monitor Starting" printNL;
		^self createEnvironment;
		[ waitForSuspensions ] whileTrue: [
		    _monitorEnvironment readEvalPrint
		];
		"+++ Monitor Stopping" printNL;
	    ] bgScalar;
	    :_monitor cleanStore
	];
	_monitor doesGroundMagic && [ _monitor terminated isFalse ]
    ]
];

Debug Inspector defineMethod: [ | createEnvironment |
    !self <- ^self;
    _monitorEnvironment isNA ifTrue: [
	:_monitorEnvironment <- ^global extendBy: [!inspector <- ^my self]. basicSpecialized
    ];
    ^self
];
