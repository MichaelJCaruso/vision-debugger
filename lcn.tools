Collection defineMethod: [ | drop: n |
  :n <- n asInteger else: 0 ;
  !cutoff <- n < 0 
      ifTrue: [ ^self count increment: n ] ifFalse: [ n ] ;
  n < 0
    ifTrue: [ ^self numberElements select: [ position <= ^my cutoff ] ]
   ifFalse: [ ^self numberElements select: [ position >  ^my cutoff ] ] .
  send: [ ^self super ] 
] ;

Collection defineMethod: [ | take: n |
  :n <- n asInteger else: 0 ;
  !cutoff <- n < 0 
      ifTrue: [ ^self count increment: n ] ifFalse: [ n ] ;
  n < 0
    ifTrue: [ ^self numberElements select: [ position > ^my cutoff ] ]
   ifFalse: [ ^self numberElements select: [ position <=  ^my cutoff ] ] .
  send: [ ^self super ] 
] ;

Debug Inspector defineMethod: [ | getCurrentEnvironment |
^self suspendee: 1 . current 
] ;

Debug Inspector defineMethod: [ | getCallStack |
 ^self  suspendees at: 1 . callers 
#   select: [ isBlockTask || isPrimitiveTask ] .
   select: [ selector asString != "value" ] . drop: -5 .
] ;

Debug Inspector defineMethod: [ | getCurrentExpression |
   !suspendee <- ^self suspendees at: 1 ;
   suspendee isBlockTask
   ifTrue: 
     [  [ suspendee 
          do: [ blockText asLines linkElements 
                   select: [ stripBoundingBlanks = "^" ] .
                do: [ prior else: "" . printNL ; 
                      printNL ;
                      next else: "" . printNL ;
                    ] ;
              ] ;
        ] divertOutput
     ] ifFalse: [ "" ] 
] ;

Debug Inspector defineMethod: [ | showCallsFromBottom |
  "... executing expression:" printNL ;
  ^self getCurrentExpression print ;
  ^self getCallStack
  do: [ "... executing " print ; selector print ;
        " at " print ; current whatAmI printNL ;
      ] ;
] ;

Debug Inspector defineMethod: [ | showCallsFromTop |
  ^self getCallStack
   doReverse: 
      [ "... executing " print ; selector print ;
        " at " print ; current whatAmI printNL ;
      ] ;
  "... executing expression:" printNL ;
   ^self getCurrentExpression print ;
] ;

newLine print ;
"From Top: " printNL ;
inspector showCallsFromTop ;

newLine print ;
"From Bottom: " printNL ;
inspector showCallsFromBottom ;




