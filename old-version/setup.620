Object respondsTo: 'define:toBePrimitive:withControlValue:'. ifFalse: [
    "/vmaster/src/Scripts/EXTcore6xx.dp" asFileContents do: [isString ifTrue: [evaluate]]
];

!myi;
Object respondsTo: 'define:toBePrimitive:withControlValue:'. ifTrue: [
    "/vmaster/src/Scripts/EXTcore.620"		asFileContents evaluate;
    "/vmaster/src/Scripts/EXTextend.620"	asFileContents evaluate;
    "/vmaster/src/Scripts/EXTmutex.620"		asFileContents evaluate;

    "/vmaster/src/Scripts/INIdebug.620"		asFileContents evaluate;
    "/vmaster/src/Scripts/EXTdebug.620"		asFileContents evaluate;
    "/vmaster/src/Scripts/EXTbp.620"		asFileContents evaluate;

    "/vmaster/src/Scripts/INImodel.620"		asFileContents evaluate;
    "/vmaster/src/Scripts/EXTmodel-a.620"	asFileContents evaluate;
    "/vmaster/src/Scripts/EXTmodel-b.620"	asFileContents evaluate;

    # Schema processAllMessages;

    ^my :myi <- Debug Inspector createInstance
	setDefaultCallerFramesTo: 7 .
	setDefaultConsumerFramesTo: 7 .
    ;
] ifFalse: [
    ">>> Cannot find primitive definition extensions needed to install the debugger." printNL
];

String respondsTo: 'newAssociativeCluster'. ifFalse: [
    ">>> Cannot find string clustering extensions needed to run the debugger." printNL
];


myi isntNA ifTrue: [
    "+++ Run 'myi evaluateReadEvalPrint' to enter debug inspection mode." printNL
];

#--------------------
#  fixes
#--------------------

Debug ModelObject defineMethod: [ | initializeKeys: representative |
    ^self :code <- representative tuid32;
    :_representative	<- representative;
    Index at: code put: ^self;
    ^self
];

#--------------------
#  new ones
#--------------------
Debug Inspector defineMethod: [ | stepOverBy: n | 
  :n <- n else: 1 ;
  !count <- 1 ;
  [ count <= n ] whileTrue: 
      [ ^self stepOver ; :count increment ; ] 
] ;

Object defineMethod: [ | clearAllBreaksInMessages |
  ^self getMessagesInInheritancePath do: [ clearBreak ] ;
] ;

