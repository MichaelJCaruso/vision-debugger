
################
####  Block Extensions
################

Block defineMethod: [ | primitiveIndex |
    !method <- ^self asMethod;
    method isPrimitive ifTrue: [method index]
];

Block defineMethod: [ | primitiveControlValue |
    !method <- ^self asMethod;
    method isPrimitive ifTrue: [method controlValue]
];


################################################################
####  Collection
################################################################

Collection defineMethod: [ | add: anElement |
    ^self basicAdd: anElement asSelf
];

################################################################
####  IndexedList
################################################################

IndexedList defineMethod: [ | basicAdd: anElement |
    ^self at: anElement put: anElement
];

################################################################
####  List
################################################################

List defineMethod: [ | basicAdd: anElement |
    ^self, anElement;
    ^self
];

List defineMethod: [ | delete: position |
    !cell <- ^self base1CellAtPosition: position;
    cell isntNA ifTrue: [!value <- cell value; cell delete; ^self alignStore; value]
];


################################################################
####  Object
################################################################

Object define: 'basicDo:with:' toBePrimitive: 37;

Object defineMethod: [ | doOnce: block |
    !current <- ^current;
    !date   <- ^date;
    !local  <- ^local;
    !self   <- ^self;
    0 asReferenceTo: ^current. == ^current ifTrue: [
        current instanceList groupedBy: [date]. do: [
            ^self super evaluate: [
                groupList groupedBy: [local]. do: [
                    ^self super asLocalContextFor: [
                        groupList groupedBy: [self]. do: [
                            ^self super basicDo: (groupList at: 1 . block) with: groupList
                        ];
                    ];
                ];
            ];
        ];
    ];
    ^self
];

Object defineMethod: [ | doOnceNoContext: block |
    !current <- ^current;
    !self   <- ^self;
    0 asReferenceTo: ^current. == ^current ifTrue: [
        current instanceList groupedBy: [self]. do: [
            ^self super basicDo: (groupList at: 1 . block) with: groupList;
        ];
    ];
    ^self
];

Object defineMethod: [ | sendOnce: block |
    !current <- ^current;
    !date   <- ^date;
    !local  <- ^local;
    !self   <- ^self;
    !result;
    0 asReferenceTo: ^current. == ^current ifTrue: [
        current instanceList groupedBy: [date]. do: [
            ^self super evaluate: [
                groupList groupedBy: [local]. do: [
                    ^self super asLocalContextFor: [
                        groupList groupedBy: [self]. do: [
                            !result <- ^self super basicSend: (groupList at: 1 . block) with: groupList;
                            groupList do: [:result <- ^my result];
                        ];
                    ];
                ];
            ];
        ];
    ];
    result
];

Object defineMethod: [ | sendOnceNoContext: block |
    !current <- ^current;
    !self   <- ^self;
    !result;
    0 asReferenceTo: ^current. == ^current ifTrue: [
        current instanceList groupedBy: [self]. do: [
            !result <- ^self super basicSend: (groupList at: 1 . block) with: groupList;
            groupList do: [:result <- ^my result];
        ];
    ];
    result
];
