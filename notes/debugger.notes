Debugger Tools Working Notes: 4/24/00
======================================================================

There are several types of event that can suspend the
execution of a Vision program:

     - Vision detects an error during processing
     - Vision reaches a user-specified resource limit
     - Vision reaches a user-specified breakpoint in the code

Processing errors include "selector not founds" (snfs) and
"read-eval-print" (rep) errors.  Resource limits include
user-specified cpu, private memory allocation, and task size limits.
Program code breakpoints can be set when specific messages are
encountered and at specific points within a block.  Once your
program has suspended, there are a number of different techniques for
exploring the state of your code and for resuming or aborting the
program.  




********************
  Execution Errors
      (snfs)
********************

Diagnostic Message:
    >>> Stopped.  Selector Not Found Encountered: 'xxx' <<<

Possible Reasons:

-  The message is being sent to a class that does not implement
   the message.  It may be entirely incorrect or it may be sent
   to a heterogeneous collection that includes classes that do 
   not implement the message.  

-  You have mispelled the name of the message.


Possible Inquiries:

-  Where am I?
   . what block am I in and what expression in the block am I executing?

-  How did I get here?
   . show me a top-down and/or bottom-up call stack summary (i.e., just
     the names of the methods called to get to this block)
   . walk through the call stack details

-  Who am I talking to?
   . what is the recipient's class?  how many instances?
   . what classes are associated with parallel executions?  how many
     instances per sibling?

-  What classes does this selector apply to?

-  What other messages might I have intended based on the message sent
   and recipient's class (i.e., assume I've misspelled the message)

Next Steps:

-  Load missing code or define missing message and retry

-  Skip execution on the current "type" and surpress cascading snfs

-  Substitute message "xxx" for the snf and continue

-  Abort execution so code can be corrected and restarted




********************
  Execution Errors
      (reps)
********************

Diagnostic Message:
    >>> Read-Eval-Print <<<

Possible Reasons:


Possible Inquiries:


Next Steps:

-  only remedy is abort




********************
  User-specified Resource Limit Reached
********************

Diagnostic Message:
    >>> Stopped.  Resource Limit xxx hit for yyy. <<<

Setting Suspension Traps:

You can indicate that your code suspend itself when specific situations
occur:

    - total memory allocation
    - incremental memory allocation
    - task size
    - cpu time
    - incremental cpu time
    - number of decompositions

You can also stop code that is running too long using Control-C.
The same inquries and next steps apply.

Possible Inquiries:

-  What are the size and details of transient structures?
   . follow the pops; task cardinality for points in the stack

-  Where am I? (same as snf)

-  How did I get here? (same as snf)

-  Who am I talking to? (same as snf)


Next Steps:

-  change resource breakpoints and continue

-  Abort execution so code can be corrected and/or resource limits
   set to break earlier




********************
  User-specified Code Breakpoint Reached
********************

Diagnostic Message:
    >>> Stopped.  Breakpoint at 'xxx'

Setting Code Breakpoints:

You can indicate that your code suspend itself when specific situations
occur:

    - encounter specific message
    - encounter specific message for specific class
    - encounter specific suspend in method

Possible Inquiries:

-  What is my current state:
   . misc vision values
   . context
   . timing and resource utilization
   . probe relationships in the call stack chain

-  Where am I? (same as snf)

-  How did I get here? (same as snf)

-  Who am I talking to? (same as snf)


Next Steps:

-  execute this message and stop
-  execute this expression for current task list and stop
-  execute this expression for all tasks and stop
-  go into this message and stop

-  clear/reset resource breakpoints and continue

-  Abort execution so code can be corrected and/or breakpoints reset
