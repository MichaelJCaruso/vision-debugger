Here's a brief description of the data access paths available in the
debugger and where you can find them.

The 'suspensions' property of a debug inspector gives you the list of
the suspension objects you're working with.  The elements of this list
are always instances of class 'Debug ModelObject Suspension'.  The
'suspendee' property of the suspension points to the particular Vision
operation it is examining.  The object referenced by 'suspendee' is an
instance of one of the subclasses of 'Debug ModelObject CUnit' and
represents the execution of a particular message (a.k.a. Debug
ModelObject Call) or method (a.k.a. Debug ModelObject Task), with the
subclass providing the appropriate detail.  Both 'CUnit' and
'Suspension' are themselves subclasses of 'Debug ModelObject CObject'.
Here's the inheritance hierarchy as it currently exists:

***  Inheritance Map For Class: Debug ModelObject  ***

Object
  |
ToolKit
  |
Debug
  |
Debug ModelObject   <===== YOU ARE HERE
   Debug ModelObject CObject
      Debug ModelObject CUnit
         Debug ModelObject Call
         Debug ModelObject Task
            Debug ModelObject BlockTask
            Debug ModelObject PrimitiveTask
            Debug ModelObject SNFTask
            Debug ModelObject TopTask
            Debug ModelObject UtilityTask
      Debug ModelObject Suspension


Cover messages at the inspector give you access to a particular
suspension (inspector suspension: n), suspendee (inspector suspendee:
n), or all suspendees ('inspector suspendees).

All instances of type 'CObject' (i.e., both CUnits and Suspensions),
respond to a number of messages that return their call stack
('callers'), and value return chain ('consumers').  These lists include
the initial object itself.  Thus,

    inspector suspendee: 1 . callers

returns the call stack for the first suspension in the inspector's list
of suspensions.  Using this access path, and one of the data access
messages described below, the following expression displays the names of
the messages associated with each stack frame:

    inspector suspendee: 1 . callers do: [selector printNL];

The first object in the list is the computation unit (i.e.,
Call/message, or Task/method) that stopped.  Under certain
circumstances, it is useful to make that first object the suspension
itself:

    inspector suspension: 1 . callers

That circumstance is when the each element of the list must provide
'context' information for element that follows it (which 'concat:' do I
mean in an expression that chains several).  That is what the default
display messages I've implemented do; however, if all you are doing is
examining the state of a stack object, you can use the first form so
that your list is guaranteed to contain only CUnits (i.e., objects
representing the state of executing messages and methods).

In addition to the 'callers' and 'consumers' messages that return the
entire stack and value return chain respectively, there are messages
that return only the first 'n' elements:

    inspector suspendee: 1 . callers: 5

or:

    inspector suspendee: 1 . consumers: 7

and a way to get to the set of all objects in the current model of
Vision's internal execution state:

    inspector ModelObject Index  (or ^global Debug ModelObject Index).

All Debug ModelObject CUnits respond to the following navigation
methods:

   ... call            ... the Call that invoked this CUnit.
   ... caller          ... the Task that invoked this CUnit.
   ... caller: n       ... the Task 'n' caller's up the
                           call stack.
   ... consumer        ... the CUnit that will use this CUnit's
                           result.
   ... consumer: n     ... the CUnit 'n' consumer's up the
                           consumer chain.
   ... subtasks        ... the sub-Tasks started on behalf of
                           this CUnit.
   ... activeSubtasks  ... the sub-Tasks started on behalf of
                           this CUnit that are still running.
   ... suppliers       ... the C-Units supplying results to
                           this CUnit.
   ... activeSuppliers ... the C-Units supplying results to
                           this CUnit that are still running.
   ... top             ... the top-most Task in the call stack.

and a number of property access messages:

Debug ModelObject ...
   ... cardinality     ... the number of instances in the internal
                           cluster.  For messages (Calls) and methods
                           (Tasks), this is the number of instances
                           being processed by the computation.
   ... internalID      ... an integer uniquely identifying the internal
                           cluster.  Same as 'code'.
   ... representative  ... an instance from the internal cluster.
   ... representativeList
                       ... the instanceList of the internal cluster.
   ... typeName        ... a string identifying the type of the
                           internal cluster.

Debug ModelObject CObject ...
   ... datum           ... the instance just computed or being passed
                           to this computation for this computation's
                           representative instance (see above).  Often
                           unavailable, occasionally alterable, and an
                           advanced concept.
   ... datumAlterable  ... a boolean indicated whether 'datum' can be
                           changed using 'representative setResultTo:'.
   ... datumAvailable  ... a boolean indicated whether 'datum' has a
                           meaningful value.

Debug ModelObject CUnit ...
   ... damaged         ... a boolean indicating whether this computation
                           unit was executing when a read-eval-print
                           error occurred.  Equivalent to 'stateName =
                           "Damaged"'.
   ... depth           ... the distance of this CUnit from the top-most
                           task in the stack (always a TopTask).
   ... failed          ... a boolean indicating whether this computation
                           unit ended its life a failure.  Equivalent
                           to 'stateName = "Failed"'.
   ... interrupted     ... a boolean indicating whether this computation

                           unit was interrupted by a ^c.  Equivalent to
                           'stateName = "Interrupted"'.
   ... paused          ... Expected to go away.  Equivalent to
                           'stateName = "Paused"'.
   ... recipientAvailable
                       ... a boolean indicating if the recipient of the
                           message that started this CUnit is still
                           available.  Always true for messages sent to
                           magic words and for all Block and Primitive
                           tasks.  True on entry only for messages sent
                           to the result of other messages.
   ... recipientRepresentative
                       ... the recipient associated with the internal
                           CUnit's representative if 'recipientAvailable'
                           is true, NA otherwise.  Actually defined at
                           Debug ModelObject Call and Task.
   ... returnCaseName  ... what this CUnit is returning.  Possible values
                           are 'Intension' (e.g., :x), 'Value', 'Current'
                           (e.g., 'extendBy:') and 'Unspecified'.
   ... selector        ... the name of the message that invoked this CUnit.
                           Actually defined at Debug ModelObject Call and
                           Task.
   ... stateName       ... the state of this CUnit.  Expect the set of
                           possible values to change; however, the current
                           set is "Runnable", "Paused", "Interrupted",
                           "Damaged", "Failed", and "Terminated".
   ... statusName      ... the stage this CUnit has reached in its attempt
                           to execute.  The current value can be "Unrun",
                           "Started", "Running", "Exiting", or "Completed".
   ... stepName        ... Expected to go away.
   ... suspendCount    ... the number of CUnits that must complete or
                           Suspensions that must resume before this CUnit
                           is allowed to run.  Will be -1 for CUnits that
                           have terminated.
   ... terminated      ... a boolean indicating whether this computation
                           unit has reached the end of its life.
                           Equivalent to 'stateName = "Completed"'.

Debug ModelObject Call ... (i.e., a message)
   ... description     ... the message's name, as a well clustered string.
   ... blockIndent     ... the position of this call in the decompilation
                           of the block that invoked it, relative to the
                           start of the line containing the call and
                           reasonably defaulted if the call was made by
                           a primitive.
   ... blockOffset     ... the position of this call in the decompilation
                           of the block that invoked it, relative to the
                           start of the entire decompilation and
                           reasonably defaulted if the call was made by
                           a primitive.
   ... blockPrefix     ... the decompilation of the block that invoked
                           this call, up to and including line containing
                           the call.  Reasonably defaulted if the call was
                           made by a primitive.
   ... blockSuffix     ... the part of the decompilation not returned by
                           'blockPrefix'.
   ... blockText       ... the decompilation of the block that invoked this
                           call, including our standard '^' marker pointing
                           to the location of this call.  Reasonably
                           defaulted if the call was made by a primitive.
   ... parameterCount  ... the number of parameters to this message.
   ... recipientSourceName
                       ... the source of this call's recipient. Possible
                           values are the name of a magic word or
                           'expression'.
   ... searchOrigin    ... a representative instance at which the search for
                           this message began.  Needed for messages to
                           ^super and ^here.

Debug ModelObject Task ...
   ... current         ... a representative value of '^current' for this
                           task, provided that 'currentAvailable' returns
                           true.
   ... currentList     ... a list of all values of '^current' for this task,
                           provided that 'currentAvailable' returns true.
   ... currentAvailable... a boolean that indicates whether '^current' is
                           available for this task.  Always true for blocks,
                           primitives, and SNF tasks; usually false for all
                           other kinds of tasks.
   ... description     ... a well-clustered string describing this task.
   ... my              ... a representative value of '^my' for this task,
                           provided that 'myAvailable' returns true.
   ... myList          ... a list of all values of '^my' for this task,
                           provided that 'myAvailable' returns true.
   ... myAvailable     ... a boolean that indicates whether '^my' is available
                           for this task.  True only for block tasks.
   ... self            ... a representative value of '^self' for this task,
                           provided that 'selfAvailable' returns true.
   ... selfList        ... a list of all values of '^self' for this task,
                           provided that 'selfAvailable' returns true.
   ... selfAvailable   ... a boolean that indicates whether '^self' is
                           available for this task  Always true for blocks,
                           primitives, and SNF tasks; usually false for all
                           other kinds of tasks.

Debug ModelObject BlockTask ...
   ... blockIndent     ... the location of this block's instruction pointer
                           relative to the start of the decompilation line
                           containing the instruction pointer.
   ... blockOffset     ... the location of this block's instruction pointer
                           relative to the start of the decompilation.
   ... blockPrefix     ... the decompilation of this block, up to and
                           including the line containing the instruction
                           pointer.
   ... blockSuffix     ... the part of the decompilation not returned by
                           'blockPrefix'.
   ... blockText       ... the full decompilation of this block, including
                           our standard '^' marker indicating the location
                           of the instruction pointer.

Debug ModelObject PrimitiveTask ...
   ... primitive       ... the primitive invoked by this task, returned as
                           an instance of class 'Primitive'.
   ... primitiveFlags  ... the control flags used to invoke this primitive
                           task.
   ... primitiveIndex  ... the index of the primitive being executed by
                           this primitive task.

... and there may be many others, but they haven't been discovrd.

To facilitate the use of Suspension objects in some of the places
computation units are used, Suspension objects implement some of the
same navigation and property access messages.  In particular, they also
implement the 'caller', 'consumer', 'recipientAvailable', 
'recipientRepresentative', 'statusName', and 'top' messages.
Additionally, they implement the following messages:

Debug ModelObject Suspension ...
   ... canAbort        ... a boolean that indicates whether this suspension
                           can abort its suspendee.  True up to the point
                           at which the suspension is used to abort, commit,
                           or resume its suspendee.
   ... canResume       ... a boolean that indicates whether this suspension
                           can resume execution of its suspendee.  False if
                           the suspendee has been aborted or resumed, or if
                           the suspendee has failed or been damaged.
   ... committed       ... a boolean that indicates whether this suspension
                           has done its job and either aborted or resumed
                           its suspendee.
   ... mustAbort       ... a boolean that indicates whether the suspendee
                           must be aborted because it has been damaged or
                           has failed.  Equivalent to 'stateName = "MustAbort"'.
   ... stateName       ... the name of this suspension's state. Current
                           values are "Aborted" (i.e., suspendee aborted),
                           "Resumed" (i.e., suspendee resumed), "MustAbort"
                           (i.e., an uncommitted suspension of a suspendee
                           that must be aborted), "WaitingToAbort" (i.e.,
                           a uncommitted suspension whose default commit
                           action is to abort its suspendee), and
                           "WaitingToResume" (i.e., an uncommitted
                           suspension whose default commit action is to
                           resume its suspendee).
   ... waitingToAbort  ... a boolean that indicates whether the suspension
                           is uncommitted and waiting to abort its suspendee.
   ... waitingToResume ... a boolean that indicates whether the suspension
                           is uncommitted and waiting to resume its suspendee.


- mjc
